本项目解决缓存穿透的问题----较为简单的方案：缓存无效的KEY 设置过期时间为1分钟-5分钟
public Object getObjectInclNullById(Integer id) {
    // 从缓存中获取数据
    Object cacheValue = cache.get(id);
    // 缓存为空
    if (cacheValue == null) {
        // 从数据库中获取
        Object storageValue = storage.get(key);
        // 缓存空对象
        cache.set(key, storageValue);
        // 如果存储数据为空，需要设置一个过期时间(300秒)
        if (storageValue == null) {
            // 必须设置过期时间，否则有被攻击的风险
            cache.expire(key, 60 * 5);
        }
        return storageValue;
    }
    return cacheValue;
}



较为复杂的 ---- 布隆过滤器
public Object getObjectByBloom(Integer id) {
    // 判断是否为合法id  小概率会被误判
    if (!bloomFilter.mightContain(id)) {
        // 非法id,则不允许继续查库
        return null;
    } else {
        // 从缓存中获取数据
        Object cacheValue = cache.get(id);
        // 缓存为空
        if (cacheValue == null) {
            // 从数据库中获取
            Object storageValue = storage.get(id);
            // 缓存空对象
            cache.set(id, storageValue);
        }
        return cacheValue;
    }
}

缓存雪崩原因

1、redis服务器挂掉了。

2、对缓存数据设置了相同的过期时间，导致某时间段内缓存集中失效。

本项目避免缓存雪崩的操作----给过期时间加上随机值，避免缓存在同一时间内失效
redis.set("iphone",60 + random(0,60))
针对原因二
采用 Redis 集群，避免单机出现问题整个缓存服务都没办法使用。（？）
限流，避免同时处理大量的请求。（已实现）